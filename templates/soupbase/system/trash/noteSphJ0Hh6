{"chalky":false,"syncme":true,"xPos":250,"linewidth":3,"from":"system from system/widgets","canvasname":"backdrop","color":"black","imports":"http://chowder.notesoup.net/js-src/js-widgets/ink.js","frontZ":30000,"yPos":100,"height":55,"width":250,"text":"<script type='text/javascript'>\n/**\n*\tink.js - Note Soup ink widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\tchalky: false,\n\tlinewidth: 3,\n\tcolor: 'black',\n\tyoffset: 45,\n\n\tinit: function(canvasname) {\n\t\tif (canvasname) this.canvasname = canvasname;\n\t\telse this.canvasname = 'backdrop';\n\t\t\n\t\tif (this.chalky) {\n\t\t\tthis.color = 'white';\n\t\t\tthis.linewidth = 4;\n\t\t}\n\t\n\t\tvar canvas = document.getElementById(this.canvasname);\n\t\tvar ctx = canvas.getContext('2d');\n\t\tif (ctx) {\n\t\t\tnotesoup.say('Ink here!');\n\t\t\tthis.setEphemeral('ctx', ctx);\n\t\t}\n\t\telse {\n\t\t\tnotesoup.say('Ink: load failed: sorry, failed to get ctx.', 'error');\n\t\t\treturn;\n\t\t}\n\n\t\t//this.yoffset = Ext.get(this.canvasname).getTop();\n\t\tExt.get(this.canvasname).on('mousedown', this.startsegment, this);\n\t\tExt.get(this.canvasname).on('mousemove', this.updatesegment, this);\n\t\tExt.get(this.canvasname).on('mouseup', this.endsegment, this);\n\t},\n\n\tgetctx: function() {\n\t\treturn this.getEphemeral('ctx');\n\t},\n\n\tplay: function(sounduri) {\n\t\tnotesoup.sound.play(sounduri);\n\t},\n\n\tstartsegment: function(e) {\n\t\tthis.lastx = e.getPageX();\n\t\tthis.lasty = e.getPageY() - this.yoffset;\n\t\tthis.pendown = true;\n\t\tif (this.chalky) this.sendself('play', '/sound/43548__richymel__tiza.mp3');\n\t\tif (this.zIndex != this.frontZ) this.sendself('canvasfront');\n\t},\n\n\tendsegment: function(e) {\n\t\tdelete this.pendown;\n\t\tnotesoup.sound.stop();\n\t\tif (this.zIndex != this.backZ) this.sendself('canvasback');\n\t},\n\n\tfrontZ: 30000,\n\tbackZ: 0,\n\tsetZ: function(z) {\n\t\tthis.zIndex = z;\n\t\tvar container = Ext.get(this.canvasname);\n\t\tif (container) {\n\t\t\tcontainer.setStyle({position: 'absolute', zIndex: this.zIndex});\n\t\t}\n\t},\n\tcanvasfront: function() { this.setZ(this.frontZ); },\n\tcanvasback: function() { this.setZ(this.backZ); },\n\n\tupdatesegment: function(e) {\n\t\tif (!this.pendown) return;\n\n\t\tvar x = e.getPageX();\n\t\tvar y = e.getPageY() - this.yoffset;\n\t\tif ((x == this.lastx) && (y == this.lasty)) return;\n\t\t\n\t\tvar color = (notesoup.ui.defaultNoteColor == '#FFFF99') ? this.color : notesoup.ui.defaultNoteColor;\n\n\t\tthis.sendself('drawline', this.lastx, this.lasty, x, y, color, this.linewidth);\n\n\t\tthis.lastx = x;\n\t\tthis.lasty = y;\n\n\t},\n\t\n\tdrawline: function(x1, y1, x2, y2, color, linewidth) {\n\t\tthis.getctx().beginPath();\n\t\tthis.getctx().strokeStyle = color || this.color;\n\t\tthis.getctx().lineWidth = linewidth || this.linewidth;\n\t\tthis.getctx().moveTo(x1, y1);\n\t\tthis.getctx().lineTo(x2, y2);\n\t\tthis.getctx().stroke();\n\t},\n\t\n\tmoveTo: function(x, y) { this.getctx().moveTo(x, y); },\n\tlineTo: function(x, y) { this.getctx().lineTo(x, y); },\n\tbeginPath: function() { this.getctx().beginPath(); },\n\tclosePath: function() { this.getctx().closePath(); },\n\tfillStyle: function(s) { this.getctx().fillStyle = s; },\n\tfill: function() { this.getctx().fill(); },\n\tstrokeStyle: function(s) { this.getctx().strokeStyle = s; },\n\tstroke: function() { this.getctx().stroke(); },\n\tfillRect: function(x, y, width, height) { this.getctx().fillRect(x, y, width, height); },\n\tstrokeRect: function(x, y, width, height) { this.getctx().strokeRect(x, y, width, height); },\n\tclearRect: function(x, y, width, height) { this.getctx().clearRect(x, y, width, height); },\n\tclear: function() { this.getctx().clearRect(0, 0, 1200, 800); },\n\tarc: function(x, y, radius, startAngle, endAngle, ccw) { this.getctx().arc(x, y, radius, startAngle, endAngle, ccw); },\n\trect: function(x, y, width, height) { this.getctx().rect(x, y, width, height); },\n\tquadraticCurveTo: function(cp1x, cp1y, x, y) { this.getctx().quadraticCurveTo(cp1x, cp1y, x, y); },\n\tbezierCurveTo: function(cp1x, cp1y, cp2x, cp2y, x, y) { this.getctx().bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y); },\n\n\tdrawImage: function(image, x, y, width, height) { this.getctx().drawImage(image, x, y, width, height); },\n\n\tfillCircle: function(x, y, radius, color) {\n\t\tthis.getctx().beginPath();\n\t\tthis.getctx().fillStyle = color || this.color;\n\t\tthis.getctx().arc(x, y, radius, 0, 2*Math.PI, true);\n\t\tthis.getctx().fill();\n\t},\n\n\n/*****\nimage can be:\n1. http:blah\n2. data: blah\n3. an element or element id\nfunction draw() {\n  var ctx = document.getElementById('canvas').getContext('2d');\n\n  // create new image object to use as pattern\n  var img = new Image();\n  img.src = 'images/wallpaper.png';\n  img.onload = function(){\n\n    // create pattern\n    var ptrn = ctx.createPattern(img,'repeat');\n    ctx.fillStyle = ptrn;\n    ctx.fillRect(0,0,150,150);\n\n  }\n}\n      \nvar img = new Image();   // Create new Image object\nimg.src = 'myImage.png'; // Set source path\nWhen this script gets executed, the image starts loading. If loading isn't finished when a drawImage statement gets executed, the script halts until the image is finished loading. If you don't want this to happen, use an onload event handler:\nvar img = new Image();   // Create new Image object\nimg.onload = function(){\n  // execute drawImage statements here\n}\nimg.src = 'myImage.png'; // Set source path\n*****/\n\n\tglobalAlpha: function(alpha) { this.getctx.globalAlpha = alpha; },\n\n\tsnapshot: function() {\n\t\tvar canvas = document.getElementById(this.canvasname);\n\t\tif (!canvas || !canvas.toDataURL) {\n\t\t\tnotesoup.say('Sorry, this browser does not support snapshots.  Firefox is known to work.', 'warning');\n\t\t\treturn;\n\t\t}\n\t\tvar thenote = {\n\t\t\tnotename: 'Snapshot',\n\t\t\t//noframe: true,\n\t\t\tnotetype: 'proxy',\n\t\t\tbgcolor: this.bgcolor,\n\t\t\twidth: this.canvaswidth,\n\t\t\theight: this.canvasheight,\n\t\t\tproxyfor: canvas.toDataURL()\n\t\t};\n\t\tnotesoup.saveNote(thenote, notesoup.foldername);\n\t},\n\n\tclearButton: function() {\n\t\tthis.sendself('clear');\n\t}\n});\nnote.init();\n</script>\n<center>\nInk widget is here!<br/>\nClick to draw on the desktop.<br/>\nToolbar sets color.<br/>\n<center>\n<input type='submit' value='clear' onclick = 'notesoup.ui.getEnclosingNote(this).clearButton();'/>\n<input type='submit' value='snapshot' onclick = 'notesoup.ui.getEnclosingNote(this).snapshot();'/>\n</center>\n","notename":"Ink","bgcolor":"#ccffcc","backZ":0,"yoffset":45,"mtime":1203791081.000000,"id":"noteSphJ0Hh6"}