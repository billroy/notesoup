{"restore":"{notesoup.saveNoteList(this.notelist);}","xPos":29,"from":"system in widgets/inbox","width":250,"text":"<center>Thu Dec 06 2007 15:21:27 GMT-0700 (MST)<br/><input type='submit' value='click to restore' onclick='notesoup.ui.getEnclosingNote(this).calleventhandler(\"restore\");'/></center>","yPos":393,"height":88,"zIndex":19,"bgcolor":"#8080f0","notelist":[{"xPos":16,"from":"soupmaster in soupmaster/@foo3","width":"250","text":"<script type='text/javascript'>\n/**\n*\tloginform.js - Note Soup login widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\tonrender: function() {\n\n\t\tvar loginForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 75,\n\t\t\twidth: this.width - 36,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\n\t\t\titems: [{\n\t\t\t\txtype: 'textfield',\n\t\t\t\tfieldLabel: 'Username',\n\t\t\t\tid: this.getFieldID('username'),\n\t\t\t\twidth: 175,\n\t\t\t},{\n\t\t\t\txtype: 'textfield',\n\t\t\t\tfieldLabel: 'Password',\n\t\t\t\tid: this.getFieldID('password'),\n\t\t\t\twidth: 175,\n\t\t\t\tinputType: 'password'\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'log in',\n\t\t\t\thandler: this.submit,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\n\t\tvar thediv = this.getContentDiv();\n\t\tthediv.innerHTML = '<br/>';\n\t\tloginForm.render(thediv);\n\t\tthis.setEphemeral('loginForm', loginForm);\n\t\t//Ext.get(thediv).addKeyListener(13, this.submit, this);\n\t},\n\n\tsubmit: function(e) {\n\t\t//notesoup.say('Login: ' + this.getField('loginForm', 'username') + ' ' + this.getField('loginForm', 'password'));\n\t\tnotesoup.login(this.getField('loginForm', 'username'), this.getField('loginForm', 'password'));\n\t}\n});\nnote.show();\n</script>","yPos":228,"height":144,"zIndex":105,"bgcolor":"#CCFFCC","notename":"log in here","mtime":1196885796.828125},{"xPos":284,"from":"soupmaster in soupmaster/@foo3","width":300,"text":"<script type='text/javascript'>\n/**\n*\tperiodicalreminder.js - Note Soup reminder widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\tontick: function() {\n\t\ttry {\n\t\t\tif (this.running) this.updateDisplay();\n\t\t} catch (e) {\n\t\t\tnotesoup.say('pr onrender error: ' + notesoup.dump(e));\n\t\t}\n\t},\n\n\tonrender: function() {\n\t\tif (this.running) this.updateDisplay();\n\t\telse this.showInputForm();\n\t},\n\n\tshowInputForm: function() {\n\t\tvar reminderForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 75,\n\t\t\twidth: this.width - 36,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: 'textfield',\n\t\t\t\tid: this.getFieldID('remindername'),\n\t\t\t\tfieldLabel: 'Subject',\n\t\t\t\tvalue: this.notename || '',\n\t\t\t\twidth: 175\n\t\t\t},{\n\t\t\t\txtype: 'textfield',\n\t\t\t\tfieldLabel: 'In how long',\n\t\t\t\tvalue: this.durationstring || '',\n\t\t\t\twidth: 175,\n\t\t\t\tid: this.getFieldID('duration'),\n\t\t\t},{\n\t\t\t\txtype: 'checkbox',\n\t\t\t\tid: this.getFieldID('autorestart'),\n\t\t\t\tfieldLabel: 'Auto restart',\n\t\t\t\tchecked: this.autorestart,\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'remind me',\n\t\t\t\thandler: this.submitReminder,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\t\tvar thediv = this.getContentDiv();\n\t\tthediv.innerHTML = '<br/><center><h2>Periodical Reminder Settings</h2></center><br/>';\n\t\treminderForm.render(thediv);\n\t\tthis.setEphemeral('reminderForm', reminderForm);\n\t\t//Ext.get(thediv).addKeyListener(13, this.submitReminder, this);\n\t},\n\n\tsubmitReminder: function(e) {\n\t\tnotesoup.say('Setting reminder to: ' + this.getField('reminderForm', 'remindername') + ' in ' + this.getField('reminderForm', 'duration'));\n\t\tthis.setupClock(this.getField('reminderForm', 'remindername'), this.getField('reminderForm', 'duration'), this.getField('reminderForm', 'autorestart'));\n\t\tthis.startClock();\n\t\t//this.save();\n\t},\n\n\tsetupClock: function(name, duration, autorestart) {\n\t\tif (!name || !duration) return;\n\t\tvar t = new Date();\n\t\tthis.set({\n\t\t\tnotename: name,\n\t\t\tclockstartstring: t.toString(),\n\t\t\tclockstart: t.getTime(),\n\t\t\tclockduration: notesoup.getDuration(duration),\n\t\t\tdurationstring: duration,\n\t\t\tautorestart: autorestart\n\t\t});\n\t\tExt.get(this.id + '_title').update(name);\n\t},\n\n\tstartClock: function() {\n\t\tthis.running = true;\n\t\tthis.complete = false;\n\t\tthis.editing = false;\n\t\tthis.flash('#22f822');\n\t},\n\t\n\trestartClock: function() {\n\t\tthis.setupClock(this.notename, this.durationstring, this.autorestart);\n\t\tthis.startClock();\n\t},\n\n\tstopClock: function() {\n\t\tdelete this.running;\n\t\tvar outerDiv = Ext.get(this.id + notesoup.ui.divSuffix);\n\t\touterDiv.setStyle('opacity', 1.0);\n\t},\n\t\n\teditClock: function() {\n\t\tthis.stopClock();\n\t\tthis.editing = true;\n\t\tthis.show();\n\t},\n\t\n\tontimercomplete: function() {\n\t\tnotesoup.say('Ding! ' + this.notename);\n\t},\n\n\tupdateDisplay: function() {\n\n\t\tvar timediff = new Date().getTime() - this.clockstart;\n\t\tthis.completed = timediff / this.clockduration;\n\t\tif ((this.completed >= 1.0)  || (this.completed < 0)) {\n\t\t\tif (!this.complete) {\n\t\t\t\tthis.ontimercomplete();\n\t\t\t\tthis.complete = true;\n\t\t\t\tif (this.autorestart) this.restartClock();\n\t\t\t}\n\t\t}\n\t\tvar bg = '#ff3030';\n\t\tif (this.completed < 0.75) bg = '#80ff80';\n\t\telse if (this.completed < 0.90) bg = '#ffff30';\n\n\t\tthis.setContentDiv([\n\t\t\t'<br/><h2><center>', \n\t\t\t\tthis.complete ? 'PAST DUE<br/>' : '',\n\t\t\t\tnotesoup.stringifyTimeDiff(timediff), \n\t\t\t\t' (', ''+Math.floor(100 * this.completed), '%) of ', this.durationstring, '<br/>',\n\t\t\t\t'since ', ''+this.clockstartstring,\n\t\t\t'</center></h2><br/>'\n\t\t].join(''));\n\n\t\tvar outerDiv = Ext.get(this.id + notesoup.ui.divSuffix);\n\t\touterDiv.setStyle('opacity', '' + Math.max(0.05, this.completed));\n\t\t\n\t\touterDiv.on('dblclick', function(e) {\n\t\t\tvar thenote = notesoup.notes[notesoup.ui.getNoteIDFromWindowID(this.id)];\n\t\t\tthenote.editClock();\n\t\t\treturn true;\n\t\t});\n\t\t\n\t\tvar innerDiv = Ext.get(this.id + notesoup.ui.contentSuffix);\n\t\tinnerDiv.setStyle('background', bg);\n\t\tvar runningForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 75,\n\t\t\twidth: this.width - 36,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: 'hidden',\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'restart',\n\t\t\t\thandler: this.restartClock,\n\t\t\t\tscope: this\n\t\t\t},{\n\t\t\t\ttext: 'edit',\n\t\t\t\thandler: this.editClock,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\t\trunningForm.render(this.getContentDiv());\n\t}\t\n});\nnote.show();\n</script>","yPos":211,"height":198,"zIndex":98,"bgcolor":"#CCFFCC","notename":"periodical reminder","mtime":1196885782.280048},{"zIndex":103,"xPos":426,"from":"soupmaster in soupmaster/@foo3","width":"250","text":"<script type='text/javascript'>\n/**\n*\tchat.js - Note Soup chat widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\tallowAnonymous: false,\n\n\tchatSay: function() {\n\t\tvar user = notesoup.username;\n\t\tif (!notesoup.loggedin) {\n\t\t\tif (!this.allowAnonymous) {\n\t\t\t\tnotesoup.say('You must be logged in to chat.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tuser = 'Anonymous';\n\t\t}\n\n\t\tvar utterance = this.getField('chatForm', 'chattext');\n\t\tif (utterance) {\n\t\t\tnotesoup.folderSay(utterance);\n\t\t\tif ($n('chat log')) {\n\t\t\t\t$n('chat log').append(user + ': ' + utterance + '<br/>');\n\t\t\t}\n\t\t\tthis.setField('chatForm', 'chattext', '');\n\t\t\tExt.get(this.id + '_chattext').focus(true);\n\t\t}\n\t},\n\n\tonrender: function() {\n\n\t\tvar chatForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 50, \n\t\t\tlabelalign: 'top',\n\t\t\twidth: this.width - 36,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\n\t\t\titems: [{\n\t\t\t\txtype: 'textarea',\n\t\t\t\tfieldLabel: 'Type here',\n\t\t\t\tid: this.getFieldID('chattext'),\n\t\t\t\tname: 'chattext',\n\t\t\t\tvalue: '',\n\t\t\t\twidth: 300\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'say it',\n\t\t\t\thandler: this.chatSay,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\t\tvar thediv = this.getContentDiv();\n\t\tthediv.innerHTML = '<br/>';\n\t\tchatForm.render(thediv);\n\t\tthis.setEphemeral('chatForm', chatForm);\n\t\tExt.get(thediv).addKeyListener(13, this.chatSay, this);\n\t}\n});\nnote.show();\n</script>\nloading...","yPos":424,"height":162,"allowAnonymous":false,"bgcolor":"#CCFFCC","notename":"Chat Widget","mtime":1196885792.532081},{"xPos":12,"from":"soupmaster in soupmaster/@foo3","bidyinc":42,"width":"250","text":"<script type='text/javascript'>\n/**\n*\tauction.js - Note Soup auction widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\txPos: 12,\n\tyPos: 36,\n\n\tbidypos: 228,\n\tbidyinc: 42,\n\n\trunningACL: {\n\t\treaders: '*',\n\t\tsenders: '*'\n\t},\n\tclosedACL: {\n\t\t//readers: '-*',\n\t\tsenders: '-*'\n\t},\n\t\n\tisAuctionOwner: function() {\n\t\treturn (notesoup.loggedin && (notesoup.username == notesoup.foldername.split('/')[0]));\n\t},\n\n\n\tstartAuction: function() {\n\t\tif (!this.running && notesoup.loggedin && this.isAuctionOwner()) {\n\t\t\tvar duration = notesoup.prompt('Starting Auction: How long should the auction last?', '100 seconds');\n\t\t\tif (!duration) return;\n\t\t\tduration = notesoup.getDuration(duration);\n\t\t\tif (!duration) return;\n\t\t\tthis.starttime = new Date().getTime();\n\t\t\tthis.duration = duration;\n\t\t\tthis.endtime = this.starttime + duration;\n\t\t\tthis.auctionuser = notesoup.username;\n\t\t\tnotesoup.setFolderACL(notesoup.foldername, this.runningACL);\n\t\t\tthis.running = true;\n\t\t\tthis.save();\n\t\t\tthis.show();\n\t\t\tnotesoup.say('The auction is running.');\n\t\t}\n\t\telse {\n\t\t\tnotesoup.say('Sorry, only the auction owner can start the auction.', 'error');\n\t\t}\n\t},\n\n\n\tendAuction: function() {\n\t\tif (this.running && this.isAuctionOwner()) {\n\t\t\tthis.running = false;\n\t\t\tnotesoup.say('Ending auction...');\n\t\t\tnotesoup.setFolderACL(notesoup.foldername, this.closedACL);\n\t\t\tnotesoup.folderSay('The auction is closed.');\n\t\t\t\n\t\t\tvar text = this.highbidder ? \n\t\t\t\t'Winning bidder: ' + this.highbidder + '<br/>Winning bid: ' + this.highbid :\n\t\t\t\t'There were no bids.';\n\t\t\t\n\t\t\tnotesoup.saveNote({\n\t\t\t\tnotename: 'Auction ended at ' + new Date(),\n\t\t\t\tbgcolor: 'lime',\n\t\t\t\txPos: this.xPos,\n\t\t\t\tyPos: this.yPos,\n\t\t\t\ttext: '<br/><br/><center>' + text + '</center><br/><br/>'\n\t\t\t}, notesoup.foldername);\n\t\t\tthis.destroy();\n\t\t}\n\t\telse {\n\t\t\tnotesoup.say('Sorry, only the auction owner can end the auction.', 'error');\n\t\t}\n\t},\n\n\n\tbid: function() {\n\t\tif (!notesoup.loggedin || !notesoup.username) {\n\t\t\tnotesoup.say('Sorry, you must be logged in to bid.', 'error');\n\t\t\treturn;\n\t\t}\n\t\tif (!this.running) {\n\t\t\tnotesoup.say('Sorry, the auction is not running.', 'error');\n\t\t\treturn;\n\t\t}\n\t\tvar bidval = this.getField('auctionForm', 'mybid');\n\t\tif (!bidval) return;\n\n\t\tvar bid = parseFloat(bidval);\n\t\tif (this.highbid && (bid <= this.highbid)) {\n\t\t\tnotesoup.say('Sorry, your bid must be greater than the current high bid.');\n\t\t\treturn;\n\t\t}\n\t\tnotesoup.say('Submitting your bid: ' + bid);\n\n\t\t//var id = 'noteauctionbid' + notesoup.randomName(20);\n\t\tnotesoup.saveNote({\n\t\t\tnotename: 'bid',\n\t\t\t//id: id,\n\t\t\txPos: 12,\n\t\t\tyPos: this.bidypos,\n\t\t\tapropos: this.id,\n\t\t\tbgcolor: notesoup.ui.defaultNoteColor,\n\t\t\ttext: '' + bid + ' by ' + notesoup.username + ' at ' + new Date()\n\t\t}, notesoup.foldername);\t//notesoup.username + '/inbox');\n\t\t//notesoup.sendNote.defer(2000, notesoup, [id, notesoup.username + '/inbox', notesoup.foldername, true]);\n\t\tthis.setField('auctionForm', 'mybid', '');\n\t\tthis.bidypos += this.bidyinc;\n\t},\n\n\n\tontick: function() {\n\t\tif (!this.running) return;\n\t\tif (new Date() > this.endtime) {\n\t\t\tif (this.isAuctionOwner()) {\n\t\t\t\tthis.endAuction();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.running = false;\n\t\t\t\tthis.setContentDiv('<br/><br/>The auction has ended...<br/><br/>');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// update time remaining\n\t\tthis.timeleft = this.endtime - new Date();\n\n\t\t// set the color\n\t\tvar newcolor = '';\n\t\tif (this.timeleft < (15*1000)) newcolor = 'red';\n\t\telse if (this.timeleft < (60*1000)) newcolor = 'yellow';\n\t\tif (newcolor && (newcolor != this.bgcolor)) {\n\t\t\tthis.bgcolor = newcolor;\n\t\t\tthis.show();\n\t\t}\n\n\t\t// find and post high bid\n\t\tthis.highbid = 0.0;\n\t\tthis.highbidder = '';\n\t\tfor (var n in notesoup.notes) {\n\t\t\tif (n == this.id) continue;\n\t\t\tvar thenote = notesoup.notes[n];\n\t\t\tif (thenote.notename != 'bid') continue;\n\n\t\t\tif (!thenote.text || !thenote.from || !thenote.mtime || \n\t\t\t\t(thenote.mtime * 1000 < this.starttime) || (thenote.mtime * 1000 > this.endtime)) {\n\t\t\t\tif (this.isAuctionOwner()) {\n\t\t\t\t\tnotesoup.say('Deleting malformed bid.');\n\t\t\t\t\tthenote.destroy();\n\t\t\t\t\t//notesoup.say(thenote.toJSON());\n\t\t\t\t}\n\t\t\t\telse continue;\n\t\t\t}\n\t\t\tvar bid = parseFloat(thenote.text);\n\t\t\tif (bid > this.highbid)  {\n\t\t\t\tthis.highbid = bid;\n\t\t\t\tthis.highbidder = thenote.from.split(' ')[0];\n\t\t\t}\n\t\t\tif (thenote.yPos >= this.bidypos) {\n\t\t\t\tthis.bidypos = thenote.yPos + this.bidyinc;\n\t\t\t}\n\t\t}\n\n\t\tthis.setField('auctionForm', 'timeleft',  notesoup.stringifyTimeDiff(this.timeleft));\n\t\tthis.setField('auctionForm', 'highbid', ''+this.highbid || '');\n\t\tthis.setField('auctionForm', 'highbidder', ''+this.highbidder || '');\n\t},\n\n\n\tonrender: function() {\n\t\n\t\tvar preamble = '';\n\n\t\tvar auctionForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 75,\n\t\t\titems: [{xtype: 'hidden'}],\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{xtype: 'hidden'}]\n\t\t});\n\n\t\tif (this.running) {\n\t\t\tauctionForm.add({\n\t\t\t\t\txtype: 'textfield',\n\t\t\t\t\tfieldLabel: 'Time remaining',\n\t\t\t\t\tid: this.getFieldID('timeleft'),\n\t\t\t\t\tname: 'timeleft',\n\t\t\t\t\twidth: this.width - 36 - 86\n\t\t\t\t},{\n\t\t\t\t\txtype: 'numberfield',\n\t\t\t\t\tfieldLabel: 'High bid',\n\t\t\t\t\tid: this.getFieldID('highbid'),\n\t\t\t\t\tname: 'highbid',\n\t\t\t\t\twidth: this.width - 36 - 86\n\t\t\t\t},{\n\t\t\t\t\txtype: 'textfield',\n\t\t\t\t\tfieldLabel: 'High bidder',\n\t\t\t\t\tid: this.getFieldID('highbidder'),\n\t\t\t\t\tname: 'highbidder',\n\t\t\t\t\twidth: this.width - 36 - 86\n\t\t\t\t},{\n\t\t\t\t\txtype: 'numberfield',\n\t\t\t\t\tfieldLabel: 'Enter your bid here',\n\t\t\t\t\tid: this.getFieldID('mybid'),\n\t\t\t\t\tname: 'mybid',\n\t\t\t\t\twidth: this.width - 36 - 86\n\t\t\t\t}\n\t\t\t);\n\t\n\t\t\tauctionForm.addButton({\n\t\t\t\ttext: 'bid',\n\t\t\t\thandler: this.bid,\n\t\t\t\tscope: this\n\t\t\t});\n\n\t\t\tif (this.isAuctionOwner()) {\n\t\t\t\tauctionForm.addButton({\n\t\t\t\t\ttext: 'end auction',\n\t\t\t\t\thandler: this.endAuction,\n\t\t\t\t\tscope: this\n\t\t\t\t});\n\t\t\t}\n\t\t} \n\t\telse {\n\t\t\tpreamble = '<center><br/><br/>Waiting for the auction owner to start the auction.<br/><br/></center>';\n\t\t\tif (this.isAuctionOwner()) {\t\t\n\t\t\t\tauctionForm.addButton({\n\t\t\t\t\ttext: 'start',\n\t\t\t\t\thandler: this.startAuction,\n\t\t\t\t\tscope: this\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.setContentDiv(preamble);\n\t\tvar thediv = this.getContentDiv();\n\t\tauctionForm.render(thediv);\n\t\tthis.setEphemeral('auctionForm', auctionForm);\n\t\t//Ext.get(thediv).addKeyListener(13, this.bid, this);\n\t}\n});\nnote.show();\n</script>","yPos":36,"runningACL":{"senders":"*","readers":"*"},"zIndex":100,"bgcolor":"#CCFFCC","bidypos":228,"notename":"Auction Widget","mtime":1196885786.840102,"height":115,"closedACL":{"senders":"-*"}},{"xPos":983,"from":"system in soupmaster/ext2widgets","width":"250","czech":true,"text":"<script type='text/javascript'>\n/**\n*\tform.js - Note Soup generic form widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\tinit: function() {\n\t\tif (!this.formfields) this.formfields = [\n\t\t\t{label: 'Notes', fieldkey: 'notes', type: 'textarea'}\n\t\t];\n\t\tthis.show();\n\t},\n\n\tonrender: function() {\n\t\tvar myForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 70,\n\t\t\tminButtonWidth: 25,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: 'hidden'\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'save',\n\t\t\t\tminWidth: 50,\n\t\t\t\thandler: this.savedata,\n\t\t\t\tscope: this\n\t\t\t},{\n\t\t\t\ttext: '+',\n\t\t\t\tminWidth: 25,\n\t\t\t\thandler: this.insertfield,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\n\t\tfor (var i=0; i<this.formfields.length; i++) {\n\t\t\tmyForm.add({\n\t\t\t\txtype: this.formfields[i].type,\n\t\t\t\tfieldLabel: this.formfields[i].label,\n\t\t\t\tid: this.getFieldID(this.formfields[i].fieldkey),\n\t\t\t\tname: this.formfields[i].fieldkey,\n\t\t\t\tvalue: this.getdata(this.formfields[i].fieldkey),\n\t\t\t\twidth: this.width - 36 - 76\t\t\n\t\t\t});\n\t\t}\n\n\t\tthis.setContentDiv('');\n\t\tmyForm.render(this.getContentDiv());\n\t\tthis.setEphemeral('myForm', myForm);\n\t},\n\n\tgetdata: function(key) {\n\t\tif (key in this) return this[key];\n\t\treturn '';\n\t},\n\n\tsavedata: function() {\n\t\tfor (var f=0; f < this.formfields.length; f++) {\n\t\t\tnotesoup.say('savedata: ' + f + ' ' + this.formfields[f].fieldkey);\n\t\t\tthis[this.formfields[f].fieldkey] = this.getField('myForm', this.formfields[f].fieldkey);\n\t\t}\n\t\tthis.save();\n\t},\n\n\tinsertfield: function() {\n\t\tnotesoup.say('insertfield: ' + this.id);\n\t\tvar newfieldtype = prompt('New field type [textfield, textarea, checkbox, ...]', '');\n\t\tvar newfieldlabel = notesoup.prompt('New field display label:', '');\n\t\tvar newfieldkey = notesoup.prompt('New field key:', '');\n\t\tif ((newfieldtype.length > 0) && (newfieldlabel.length > 0) && (newfieldkey.length > 0)) {\n\t\t\tif (!(newfieldkey in this)) this[newfieldkey] = '';\n\t\t\tthis.formfields.push({label: newfieldlabel, fieldkey: newfieldkey, type: newfieldtype});\n\t\t\tthis.save();\n\t\t}\n\t},\n\n\tupdateValues: function() {\n\t\tfor (var f=0; f < this.formfields.length; f++) {\n\t\t\tthis.setValue('myForm', this.formfields[f].fieldkey, this[this.formfields[f].fieldkey]);\n\t\t}\n\t}\n});\nnote.init();\n</script>","notes":"hi","formfields":[{"fieldkey":"notes","type":"textarea","label":"Notes"},{"fieldkey":"birds","type":"textfield","label":"birds"},{"fieldkey":"czech","type":"checkbox","label":"check"},{"fieldkey":"frotzkelor","type":"colorpalette","label":"Frotzkelor"},{"fieldkey":"w1","type":"window","label":"w1"},{"fieldkey":"markup23","type":"htmleditor","label":"markup"},{"fieldkey":"datex","type":"datepicker","label":"datex"}],"yPos":48,"height":653,"zIndex":125,"bgcolor":"#CCFFFF","frotzkelor":"","notename":"f47","w1":"","mtime":1196979684.800540,"markup23":"","datex":"","birds":"34"},{"imageroot":"http://notesoup.net/images/UII_Icons/32x32/","text":"<script type='text/javascript'>\n/**\n*\tporthole.js - Note Soup portable hole widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\tisPortableHole: true,\n\trandom: true,\n\n\tinit: function() {\n\t\tthis.bgcolor = '#eeeeee';\n\t\tthis.save();\n\t\tif (this.viewfolder) this.refreshNoteList();\n\t\telse if (this.feedurl) this.getFeed();\n\t},\n\n\n\trefreshNoteList: function() {\n\t\tif (this.viewfolder) {\n\t\t\tdelete this.running;\n\t\t\tdelete this.targetnoteid;\n\t\t\tdelete this.targetnote;\n\t\t\tdelete this.notes;\n\t\t\tdelete this.noteidlist;\n\n\t\t\tnotesoup.postRequest({\n\t\t\t\tmethod:\"gettemplatelist\",\n\t\t\t\tparams:{\n\t\t\t\t\tfromfolder: this.viewfolder\n\t\t\t}},{\n\t\t\t\trequestMessage: 'Fetching note list from ' + this.viewfolder + '...',\n\t\t\t\tsuccessMessage: 'Fetch complete.',\n\t\t\t\tsuccessProc:\tthis.handleNoteListUpdate,\n\t\t\t\tsuccessProcScope: this,\n\t\t\t\tfailureMessage: 'Failed.'\n\t\t\t});\n\t\t\tthis.showLoading();\n\t\t}\n\t},\n\n\n\t/**\n\t*\tnotelist:\n\t*\t[0]: foldername like charlie/inbox\n\t*\t[1]: noteid like noteN003kkrOI\n\t*\t[2]: notename like shopping list\n\t*/\n\thandleNoteListUpdate: function(response, options) {\n\t\tthis.setContentDiv('');\t// kill the loading indicator\n\t\tvar response = Ext.util.JSON.decode(response.responseText);\n\n\t\tif (response['error']) {\n\t\t\tnotesoup.say('Could not fetch note list.', 'error');\n\t\t\treturn;\n\t\t}\n\t\tvar notelist = response.command[0][1];\n\n\t\tthis.noteidlist = [];\n\t\tfor (var i=0; i < notelist.length; i++) {\n\t\t\tif (notelist[i][1].indexOf('.') < 0) {\n\t\t\t\tthis.noteidlist.push(notelist[i][1]);\n\t\t\t}\n\t\t}\n\t\t//notesoup.say('Note id list: ' + notesoup.dump(this.noteidlist));\n\t\tif (this.random) this.randomNote();\n\t\telse this.firstNote();\n\t\tthis.running = true;\n\t},\n\n\n\n\t/**\n\t*\tFetch an RSS feed via the server\n\t*/\n\tgetFeed: function(feedurl) {\n\t\tthis.feedurl = feedurl;\n\t\tExt.Ajax.request({\n\t\t\tmethod: 'GET',\n\t\t\turl: '/getfeed',\n\t\t\tparams: {url: feedurl},\n\t\t\tdisableCaching: false,\n\t\t\tsuccess: this.getFeedHandler,\n\t\t\tscope: this\n\t\t});\n\t\tnotesoup.say('Feed request sent...');\n\t\tthis.showLoading.createDelegate(this).defer(10);\n\t},\n\t\n\t\n\t/**\n\t*\tFormat and display the specified rss feed item.\n\t*\t@param {number} entry\tthe index of the entry in feed[entries]\n\t*/\n\tnoteFromRSSEntry: function(entry) {\n\t\tvar text = [];\n\t\ttext.push(\n\t\t\t'<b>', entry.title, ': </b>',\n\t\t\tentry.summary,\n\t\t\t'<a href=\"', entry.link, '\" target=\"_blank\">',\n\t\t\t'<img src=\"', notesoup.imageHost, 'images/famfamfam.com/link.png\"></a>',\n\t\t\tentry.updated ? '<hr/><h5>Updated: ' + entry.updated + '</h5>' : '');\n\n\t\treturn {\n\t\t\tnotename: this.feedname || 'RSS Hole',\n\t\t\ttext: text.join(''),\n\t\t\tid: 'feed' + notesoup.randomName(10),\n\t\t\tbgcolor: notesoup.ui.defaultNoteColor\n\t\t};\n\t},\n\t\n\t\n\t/**\n\t*\tHandler for getfeed: process incoming feed data.\n\t*\t@param {object} response\tthe response object\n\t*\t@param {boolean} success\ttrue if we got a feed back\n\t*/\n\tgetFeedHandler: function(response, success) {\n\t\tif (success) {\n\t\t\tthis.setContentDiv('Feed data received.');\n\t\t\tvar feed = Ext.util.JSON.decode(response.responseText);\n\t\t\tif (feed.bozo) {\n\t\t\t\tthis.setContentDiv('Server reports a format error in feed data.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.feedname = feed.feed.title || this.notename || '';\n\t\t\tthis.notes = {};\n\t\t\tthis.noteidlist = [];\n\t\t\tfor (var entry=0; entry < feed.entries.length; entry++) {\n\t\t\t\tvar thenote = this.noteFromRSSEntry(feed.entries[entry]);\n\t\t\t\tthis.notes[thenote.id] = thenote;\n\t\t\t\tthis.noteidlist.push(thenote.id);\n\t\t\t}\n\t\t\tthis.setContentDiv('');\n\t\t\t\n\t\t\tif (this.random) this.randomNote();\n\t\t\telse this.firstNote();\n\t\t\tthis.running = true;\n\t\t} \n\t\telse this.setContentDiv('Unable to fetch feed.');\n\t},\n\n\n\n\n\thandleNotePick: function(combo, record, index) {\n\t\tthis.cleanupGuests();\n\t\tif (index < 0) index = this.noteidlist.length - 1;\n\t\tif (index > this.noteidlist.length-1) index = 0;\n\t\tthis.targetnoteindex = index;\n\t\tthis.targetnoteid = this.noteidlist[this.targetnoteindex];\n\t\t\n\t\tif (this.notes && (this.targetnoteid in this.notes)) {\n\t\t\tthis.targetnote = this.notes[this.targetnoteid];\n\t\t\tthis.settimer();\n\t\t\tthis.show();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tnotesoup.postRequest({\n\t\t\tmethod:\"getnote\",\n\t\t\tparams:{\n\t\t\t\tfromfolder: this.viewfolder,\n\t\t\t\tnoteid: this.targetnoteid\n\t\t\t}\n\t\t},{\n\t\t\t//requestMessage: 'Fetching note...',\n\t\t\tsuccessProc: this.getNoteHandler,\n\t\t\tsuccessProcScope: this,\n\t\t\tfailureMessage: 'Could not fetch note: ' + this.targetnoteid\n\t\t});\n\t},\n\n\n\tgetNoteHandler: function(response, options) {\n\t\t//notesoup.say('Fetch complete.');\n\t\t//notesoup.say(response.responseText);\n\t\tvar response = Ext.util.JSON.decode(response.responseText);\n\n\t\tif (response['error']) {\n\t\t\tthis.targetnote = {\n\t\t\t\tnotename: 'Error',\n\t\t\t\ttext: '<br/><br/><center>Error fetching note: ' + response.error + '</center></br></br>',\n\t\t\t\tbgcolor: 'red'\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.targetnote = response.command[0][1];\n\t\t\tthis.settimer();\n\t\t}\n\t\t//notesoup.say('GETNOTEHANDLER: ' + notesoup.dump(this.targetnote));\n\t\tthis.show();\n\t},\n\n\n\t// player control panel\n\timageroot: \t\t'http://notesoup.net/images/UII_Icons/32x32/',\n\tprevimage: \t\t'backward.png',\n\tstartimage: \t'play.png',\n\tpauseimage: \t'pause.png',\n\tnextimage:\t\t'forward.png',\n\trefreshimage: \t'refresh.png',\n\topenfolderimage:'open.png',\n\tsettingsimage:\t'configuration.png',\n\tsnapshotimage: \t'digital_camera.png',\n\n\timagedisplaytime: 2,\n\timagecountdown: 2,\n\n\tsettimer: function() {\n\t\tthis.imagecountdown = this.imagedisplaytime;\n\t},\n\n\tontick: function() {\n\t\tif (this.running) {\n\t\t\t//notesoup.say('countdown: ' + this.imagecountdown + typeof(this.imagecountdown));\n\t\t\tif (--this.imagecountdown <= 0) {\n\t\t\t\tthis.settimer();\n\t\t\t\tif (this.random) this.randomNote.defer(Math.random() * 2000, this);\n\t\t\t\telse this.nextNote.defer(Math.floor(Math.random() * 2000), this);\n\t\t\t}\n\t\t}\n\t},\n\n\tfirstNote: function() {\n\t\tthis.handleNotePick(null, null, 0);\n\t},\n\n\tprevNote: function() {\n\t\tthis.handleNotePick(null, null, this.targetnoteindex-1);\n\t},\n\n\tnextNote: function() {\n\t\tthis.handleNotePick(null, null, this.targetnoteindex+1);\n\t},\n\t\n\trandomNote: function() {\n\t\tthis.handleNotePick(null, null, Math.floor(Math.random() * this.noteidlist.length));\n\t},\n\t\n\tpause: function() {\n\t\tnotesoup.say('Stopped.');\n\t\tdelete this.running;\n\t\tthis.updateControls();\n\t},\n\n\tstart: function() {\n\t\tnotesoup.say('Starting...');\n\t\tthis.running = true;\n\t\tthis.updateControls();\n\t},\n\t\n\topenfolder: function() {\n\t\tif (this.viewfolder)\n\t\t\tnotesoup.openFolder(this.viewfolder);\n\t},\n\t\n\tsettings: function() {\n\t\tvar f = notesoup.prompt('Enter the folder to view, or an RSS feed URL:', this.viewfolder || this.feedurl || notesoup.foldername);\n\t\tif (!f) return;\n\n\t\tif (f.substring(0,7) == 'feed://') {\n\t\t\tthis.feedurl = 'http' + f.substr(4);\n\t\t\tdelete this.viewfolder;\n\t\t\tthis.save();\n\t\t\tthis.getFeed(this.feedurl);\n\t\t}\n\t\telse {\n\t\t\tthis.viewfolder = f;\n\t\t\tdelete this.feedurl;\n\t\t\tthis.save();\n\t\t\tthis.refreshNoteList();\n\t\t}\n\t},\n\n\tclone: function(obj) {\n\t\tvar theclone = {};\n\t\tfor (var o in obj) theclone[o] = obj[o];\n\t\treturn theclone;\n\t},\n\n\tsnapshot: function() {\n\t\tvar newnote = this.clone(this.targetnote);\n\t\tdelete newnote.id;\n\t\tdelete newnote.homediv;\n\t\tdelete newnote.xPos;\n\t\tdelete newnote.yPos;\n\t\tdelete newnote.zIndex;\n\t\tnotesoup.saveNote(newnote, notesoup.foldername);\n\t},\n\n\tmakeButton: function(img, handler) {\n\t\treturn ['<img src=\"', this.imageroot, img, '\"',\n\t\t\t' onclick=\"notesoup.ui.getEnclosingNote(this).', handler, '();\"/>'].join('');\n\t},\n\n\trenderControls: function() {\n\t\tvar o = [];\n\t\to.push('<center>');\n\t\to.push(this.makeButton(this.settingsimage, 'settings'));\n\t\tif (this.noteidlist) {\n\t\t\to.push(this.makeButton(this.previmage, 'prevNote'));\n\n\t\t\tif (this.running) o.push(this.makeButton(this.pauseimage, 'pause'));\n\t\t\telse o.push(this.makeButton(this.startimage, 'start'));\n\n\t\t\to.push(this.makeButton(this.nextimage, 'nextNote'));\n\t\t\to.push(this.makeButton(this.snapshotimage, 'snapshot'));\n\t\t}\n\t\tif (this.viewfolder)\n\t\t\to.push(this.makeButton(this.openfolderimage, 'openfolder'));\n\t\to.push('</center>');\n\t\treturn o.join('');\n\t},\n\n\tupdateControls: function() {\n\t\tvar elt = Ext.get(this.id + '_title');\n\t\tif (elt) elt.update(this.renderControls());\n\t},\n\t\n\tguestNoteName: function() {\n\t\tfor (var i=0; i < 10000; i++) {\n\t\t\tvar name = 'guest' + notesoup.randomName(10);\n\t\t\tif (!$(name)) return name;\n\t\t}\n\t\tnotesoup.say('oops guestname');\n\t},\n\t\n\tcleanupGuests: function() {\n\t\tif (this.guestnotes) {\n\t\t\twhile (this.guestnotes.length > 0) {\n\t\t\t\tvar noteid = this.guestnotes.pop();\n\t\t\t\tif (noteid in notesoup.notes) {\n\t\t\t\t\tif (notesoup.notes[noteid].isPortableHole)\n\t\t\t\t\t\tnotesoup.notes[noteid].cleanupGuests();\n\t\t\t\t\tnotesoup.destroyNote(noteid);\n\t\t\t\t}\n\t\t\t\telse notesoup.say('Guest already left: ' + noteid);\n\t\t\t}\n\t\t}\n\t},\n\n\tonrender: function() {\n\t\tvar o = [];\n\t\tvar portHoleCover = {\n\t\t\tnotename: this.renderControls(),\t\t//'Portable Hole',\n\t\t\ttext: '<br/><br/><br/><br/><br/>',\n\t\t\tbgcolor: '#000000'\n\t\t};\n\t\tif (this.targetnote) {\n\t\t\tthis.cleanupGuests();\n\t\t\n\t\t\t//var guestnote = this.clone(this.targetnote.isPortableHole ? portHoleCover : this.targetnote);\n\t\t\tvar guestnote = {};\n\t\t\tif (this.targetnote.isPortableHole && (this.viewfolder == notesoup.foldername) &&\n\t\t\t\t(this.targetnote.id == this.id)) guestnote = this.clone(portHoleCover);\n\t\t\telse guestnote = this.clone(this.targetnote);\t\n\t\n\t\t\tguestnote.id = 'guest' + notesoup.randomName(10);\n\t\t\tguestnote.homediv = this.id + notesoup.ui.contentSuffix;\n\t\t\tguestnote.xPos = this.xPos + 20;\n\t\t\tguestnote.yPos = this.yPos + 50;\n\t\t\tguestnote.zIndex = this.zIndex + 1;\n\t\t\tnotesoup.updateNote(guestnote);\n\t\t\tif (!this.guestnotes) this.guestnotes = [];\n\t\t\tthis.guestnotes.push(guestnote.id);\n\t\t\tthis.guestnoteid = guestnote.id;\n\t\t}\n\t\tthis.updateControls();\n\t},\n\t\n\n\twidthOffset: 40,\n\theightOffset: 100,\n\tminWidth: 100,\n\tminHeight: 100,\n\n\tsyncHeight: function() {\n\n\t\tif (!this.targetnote) return soupnote.prototype.syncHeight.apply(this);\n\t\tvar guestdiv = Ext.get(this.guestnoteid + notesoup.ui.divSuffix);\n\t\tif (!guestdiv) {\n\t\t\t//notesoup.say('Could not fetch guest div.', 'error');\n\t\t\treturn;\n\t\t}\n\t\tvar guestsize = guestdiv.getSize();\n\t\tguestsize.width = Math.max(guestsize.width || 0, this.minWidth);\n\t\tguestsize.height = Math.max(guestsize.height || 0, this.minHeight);\n\t\t//notesoup.say('Adjusting to guest size: ' + guestsize.width + ' ' + guestsize.height);\n\n\t\tvar outerDiv = Ext.get(this.id + notesoup.ui.divSuffix);\n\t\tvar noteDiv = Ext.get(this.id);\n\t\tvar contentDiv = Ext.get(this.id + notesoup.ui.contentSuffix);\n\t\tif (!outerDiv || !contentDiv) {\n\t\t\tnotesoup.say('No outer DIV or no content DIV.', 'error');\n\t\t}\n\t\tcontentDiv.setSize(guestsize.width || notesoup.defaultNoteWidth, guestsize.height || notesoup.defaultNoteHeight, true);\n\t\tnoteDiv.setSize(guestsize.width + this.widthOffset, guestsize.height + this.heightOffset, true);\n\t\touterDiv.setSize(guestsize.width + this.widthOffset, guestsize.height + this.heightOffset, true);\n\t}\n});\nnote.init();\n</script>","random":true,"height":60,"widthOffset":40,"mtime":1196979657.424049,"nextimage":"forward.png","isPortableHole":true,"previmage":"backward.png","from":"system in soupmaster/ext2widgets","width":"250","minWidth":100,"bgcolor":"#eeeeee","heightOffset":100,"imagecountdown":2,"refreshimage":"refresh.png","minHeight":100,"zIndex":109,"pauseimage":"pause.png","xPos":702,"startimage":"play.png","settingsimage":"configuration.png","yPos":47,"imagedisplaytime":2,"notename":"Portable Hole","snapshotimage":"digital_camera.png","openfolderimage":"open.png"},{"xPos":710,"from":"soupmaster in soupmaster/ext2widgets","width":350,"text":"<script type='text/javascript'>\n/**\n*\tcalculator.js - Note Soup calculator widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\n\tontick: function() {\n\t\tif (this.getField('calculatorForm', 'autorecalc')) this.calc();\n\t},\n\t\n\tstart: function() {\n\t\tthis.setField('calculatorForm', 'autorecalc', true);\n\t},\n\n\tstop: function() {\n\t\tthis.setField('calculatorForm', 'autorecalc', false);\n\t},\n\n\tcalc: function() {\n\t\tthis.formula = this.getField('calculatorForm', 'formula');\n\t\tthis.autorecalc = this.getField('calculatorForm', 'autorecalc');\n\t\tthis.value = null;\n\t\ttry {\n\t\t\tthis.value = eval(this.formula);\n\t\t} catch (e) {\n\t\t\tthis.value = 'ERROR: ' + e;\n\t\t}\n\t\tthis.setField('calculatorForm', 'value', this.value);\n\t\treturn this.value;\n\t},\n\t\n\tsaveForm: function() {\n\t\tthis.formula = this.getField('calculatorForm', 'formula');\n\t\tthis.autorecalc = this.getField('calculatorForm', 'autorecalc');\n\t\tthis.save();\n\t},\n\n\tgetvalue: function() {\n\t\treturn this.value;\n\t},\n\n\tsetvalue: function(newformula) {\n\t\tthis.formula = newformula;\n\t\treturn this.calc();\n\t},\n\t\n\n\tonrender: function() {\n\n\t\tvar calculatorForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 75,\n\t\t\twidth: this.width - 36,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: (this.formula && (this.formula.length > 40)) ? 'textarea' : 'textfield',\n\t\t\t\tfieldLabel: 'Formula',\n\t\t\t\tid: this.getFieldID('formula'),\n\t\t\t\tvalue: this.formula || '',\n\t\t\t\twidth: this.width - 36 - 86,\n\t\t\t\theight: (this.formula && (this.formula.length > 40)) ? Math.max(48, this.height - 85) : null\n\t\t\t},{\n\t\t\t\txtype: 'textfield',\n\t\t\t\tfieldLabel: 'Value',\n\t\t\t\tid: this.getFieldID('value'),\n\t\t\t\tvalue: this.value || '',\n\t\t\t\twidth: this.width - 36 - 86\n\t\t\t},{\n\t\t\t\txtype: 'checkbox',\n\t\t\t\tfieldLabel: 'Auto recalc',\n\t\t\t\tid: this.getFieldID('autorecalc'),\n\t\t\t\tchecked: this.autorecalc,\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'Calc',\n\t\t\t\thandler: this.calc,\n\t\t\t\tscope: this\n\t\t\t},{\n\t\t\t\ttext: 'Save', \n\t\t\t\thandler: this.saveForm,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\n\t\tthis.setContentDiv('<br/>');\n\t\tcalculatorForm.render(this.getContentDiv());\n\t\tthis.setEphemeral('calculatorForm', calculatorForm);\n\n\t\tExt.get(this.getFieldID('formula')).on('focus', this.stop, this);\n\t\tExt.get(this.getFieldID('value')).on('focus', this.stop, this);\n\t}\n});\nnote.show();\n</script>","yPos":406,"height":200,"zIndex":124,"bgcolor":"#CCFFCC","autorecalc":false,"notename":"Calculator","mtime":1196963751.203176,"formula":"notesoup.stringifyTimeDiff(notesoup.sessionTime())"},{"xPos":622,"from":"soupmaster in soupmaster/@foo3","width":"250","text":"<script type='text/javascript'>\n/**\n*\tform.js - Note Soup generic form widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\tinit: function() {\n\t\tif (!this.formfields) this.formfields = [\n\t\t\t{label: 'Notes', fieldkey: 'notes', type: 'textarea'}\n\t\t];\n\t\tthis.show();\n\t},\n\n\tonrender: function() {\n\t\tvar myForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 70,\n\t\t\tminButtonWidth: 25,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: 'hidden'\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'save',\n\t\t\t\tminWidth: 50,\n\t\t\t\thandler: this.savedata,\n\t\t\t\tscope: this\n\t\t\t},{\n\t\t\t\ttext: '+',\n\t\t\t\tminWidth: 25,\n\t\t\t\thandler: this.insertfield,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\n\t\tfor (var i=0; i<this.formfields.length; i++) {\n\t\t\tmyForm.add({\n\t\t\t\txtype: this.formfields[i].type,\n\t\t\t\tfieldLabel: this.formfields[i].label,\n\t\t\t\tid: this.getFieldID(this.formfields[i].fieldkey),\n\t\t\t\tname: this.formfields[i].fieldkey,\n\t\t\t\tvalue: this.getdata(this.formfields[i].fieldkey),\n\t\t\t\twidth: this.width - 36 - 76\t\t\n\t\t\t});\n\t\t}\n\n\t\tthis.setContentDiv('');\n\t\tmyForm.render(this.getContentDiv());\n\t\tthis.setEphemeral('myForm', myForm);\n\t},\n\n\tgetdata: function(key) {\n\t\tif (key in this) return this[key];\n\t\treturn '';\n\t},\n\n\tsavedata: function() {\n\t\tfor (var f=0; f < this.formfields.length; f++) {\n\t\t\tthis[this.formfields[f].fieldkey] = this.getField('myForm', this.formfields[f].fieldkey);\n\t\t}\n\t\tthis.save();\n\t},\n\n\tinsertfield: function() {\n\t\tnotesoup.say('insertfield: ' + this.id);\n\t\tvar newfieldtype = prompt('New field type [textfield, textarea, checkbox, ...]', '');\n\t\tvar newfieldlabel = notesoup.prompt('New field display label:', '');\n\t\tvar newfieldkey = notesoup.prompt('New field key:', '');\n\t\tif ((newfieldtype.length > 0) && (newfieldlabel.length > 0) && (newfieldkey.length > 0)) {\n\t\t\tif (!(newfieldkey in this)) this[newfieldkey] = '';\n\t\t\tthis.formfields.push({label: newfieldlabel, fieldkey: newfieldkey, type: newfieldtype});\n\t\t\tthis.save();\n\t\t}\n\t},\n\n\tupdateValues: function() {\n\t\tfor (var f=0; f < this.formfields.length; f++) {\n\t\t\tthis.setValue('myForm', this.formfields[f].fieldkey, this[this.formfields[f].fieldkey]);\n\t\t}\n\t}\n});\nnote.init();\n</script>","formfields":[{"fieldkey":"notes","type":"textarea","label":"Notes"}],"yPos":223,"height":147,"zIndex":117,"bgcolor":"#CCFFCC","notename":"Form","mtime":1196888852.586452},{"xPos":25,"from":"soupmaster in soupmaster/@foo3","width":390,"text":"<script type='text/javascript'>\n/**\n*\tuploadForm.js - Note Soup file upload widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\thandleResponse: function(elt, success, response) {\n\t\t//notesoup.say('Upload status: ' + elt.id + ' ' + success + ' ' + response.responseText);\n\t\tthis.setContentDiv(response.responseText);\n\t\tthis.show.createDelegate(this).defer(3000);\n\t\tnotesoup.sendSync();\n\t},\n\n\tsubmitForm: function() {\n\t\tvar form = this.getEphemeral('uploadForm').getForm();\n\t\tif (form) {\n\t\t\tvar el = form.el.dom;\n\t\t\tif (el) {\n\t\t\t\tel.setAttribute('enctype', 'multipart/form-data');\n\t\t\t\ttry {\n\t\t\t\t\tformManager = new Ext.UpdateManager(el);\n\t\t\t\t\tformManager.formUpdate(el, '/upload', true, this.handleResponse.createDelegate(this));\n\t\t\t\t\tthis.showLoading();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tnotesoup.say('form submission error: ' + notesoup.dump(e));\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\t\t\n\t},\n\n\tonrender: function() {\n\n\t\tvar uploadForm = new Ext.FormPanel({\n\n\t\t\tlabelAlign: 'right',\n\t\t\tfileUpload: true,\n\t\t\tlabelWidth: 75,\n\t\t\twidth: this.width - 36,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: 'textfield',\n\t\t\t\tid: this.getFieldID('thefile'),\n\t\t\t\tallowBlank: false,\n\t\t\t\tinputType: 'file',\n\t\t\t\tname: 'thefile',\n\t\t\t\tfieldLabel: 'File to upload',\n\t\t\t\twidth: 300\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'Upload',\n\t\t\t\thandler: this.submitForm,\n\t\t\t\tscope: this\n\t\t\t},{\n\t\t\t\ttext: 'Done', \n\t\t\t\thandler: this.destroy,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\t\tthis.setContentDiv('<br/>');\n\t\tuploadForm.render(this.getContentDiv());\n\t\tthis.setEphemeral('uploadForm', uploadForm);\n\t}\n});\nnote.show();\n</script>\nLoading...","yPos":424,"height":130,"zIndex":104,"bgcolor":"#CCFFCC","notename":"upload a file","mtime":1196885794.334772},{"xPos":682,"from":"soupmaster in soupmaster/@foo3","width":"250","text":"<script type='text/javascript'>\n/**\n*\tform.js - Note Soup generic form widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\tinit: function() {\n\t\tif (!this.formfields) this.formfields = [\n\t\t\t//{label: 'Notes', fieldkey: 'notes', type: 'textarea'}\n\t\t];\n\t\tthis.show();\n\t},\n\n\tonrender: function() {\n\t\tvar myForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 70,\n\t\t\tminButtonWidth: 25,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: 'hidden'\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'save',\n\t\t\t\tminWidth: 50,\n\t\t\t\thandler: this.savedata,\n\t\t\t\tscope: this\n\t\t\t},{\n\t\t\t\ttext: '+',\n\t\t\t\tminWidth: 25,\n\t\t\t\thandler: this.insertfield,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\n\t\tfor (var i=0; i<this.formfields.length; i++) {\n\t\t\tmyForm.add({\n\t\t\t\txtype: this.formfields[i].type,\n\t\t\t\tfieldLabel: this.formfields[i].label,\n\t\t\t\tid: this.getFieldID(this.formfields[i].fieldkey),\n\t\t\t\tname: this.formfields[i].fieldkey,\n\t\t\t\tvalue: this.getdata(this.formfields[i].fieldkey),\n\t\t\t\twidth: this.width - 36 - 76\t\t\n\t\t\t});\n\t\t}\n\n\t\tthis.setContentDiv('');\n\t\tmyForm.render(this.getContentDiv());\n\t\tthis.setEphemeral('myForm', myForm);\n\t},\n\n\tgetdata: function(key) {\n\t\tif (key in this) return this[key];\n\t\treturn '';\n\t},\n\n\tsavedata: function() {\n\t\tfor (var f=0; f < this.formfields.length; f++) {\n\t\t\tthis[this.formfields[f].fieldkey] = this.getField('myForm', this.formfields[f].fieldkey);\n\t\t}\n\t\tthis.save();\n\t},\n\n\tinsertfield: function() {\n\t\tnotesoup.say('insertfield: ' + this.id);\n\t\tvar newfieldtype = prompt('New field type [textfield, textarea, checkbox, ...]', '');\n\t\tvar newfieldlabel = notesoup.prompt('New field display label:', '');\n\t\tvar newfieldkey = notesoup.prompt('New field key:', '');\n\t\tif ((newfieldtype.length > 0) && (newfieldlabel.length > 0) && (newfieldkey.length > 0)) {\n\t\t\tif (!(newfieldkey in this)) this[newfieldkey] = '';\n\t\t\tthis.formfields.push({label: newfieldlabel, fieldkey: newfieldkey, type: newfieldtype});\n\t\t\tthis.save();\n\t\t}\n\t},\n\n\tupdateValues: function() {\n\t\tfor (var f=0; f < this.formfields.length; f++) {\n\t\t\tthis.setValue('myForm', this.formfields[f].fieldkey, this[this.formfields[f].fieldkey]);\n\t\t}\n\t}\n});\nnote.init();\n</script>","formfields":[],"yPos":116,"height":77,"zIndex":115,"bgcolor":"#CCFFCC","notename":"Form","mtime":1196886541.004936},{"xPos":266,"from":"soupmaster in soupmaster/ext2widgets","width":350,"text":"<script type='text/javascript'>\n/**\n*\tcalculator.js - Note Soup calculator widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\n\tontick: function() {\n\t\tif (this.getField('calculatorForm', 'autorecalc')) this.calc();\n\t},\n\t\n\tstart: function() {\n\t\tthis.setField('calculatorForm', 'autorecalc', true);\n\t},\n\n\tstop: function() {\n\t\tthis.setField('calculatorForm', 'autorecalc', false);\n\t},\n\n\tcalc: function() {\n\t\tthis.formula = this.getField('calculatorForm', 'formula');\n\t\tthis.autorecalc = this.getField('calculatorForm', 'autorecalc');\n\t\tthis.value = null;\n\t\ttry {\n\t\t\tthis.value = eval(this.formula);\n\t\t} catch (e) {\n\t\t\tthis.value = 'ERROR: ' + e;\n\t\t}\n\t\tthis.setField('calculatorForm', 'value', this.value);\n\t\treturn this.value;\n\t},\n\t\n\tsaveForm: function() {\n\t\tthis.formula = this.getField('calculatorForm', 'formula');\n\t\tthis.autorecalc = this.getField('calculatorForm', 'autorecalc');\n\t\tthis.save();\n\t},\n\n\tgetvalue: function() {\n\t\treturn this.value;\n\t},\n\n\tsetvalue: function(newformula) {\n\t\tthis.formula = newformula;\n\t\treturn this.calc();\n\t},\n\t\n\n\tonrender: function() {\n\n\t\tvar calculatorForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 75,\n\t\t\twidth: this.width - 36,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: (this.formula && (this.formula.length > 40)) ? 'textarea' : 'textfield',\n\t\t\t\tfieldLabel: 'Formula',\n\t\t\t\tid: this.getFieldID('formula'),\n\t\t\t\tvalue: this.formula || '',\n\t\t\t\twidth: this.width - 36 - 86,\n\t\t\t\theight: (this.formula && (this.formula.length > 40)) ? Math.max(48, this.height - 85) : null\n\t\t\t},{\n\t\t\t\txtype: 'textfield',\n\t\t\t\tfieldLabel: 'Value',\n\t\t\t\tid: this.getFieldID('value'),\n\t\t\t\tvalue: this.value || '',\n\t\t\t\twidth: this.width - 36 - 86\n\t\t\t},{\n\t\t\t\txtype: 'checkbox',\n\t\t\t\tfieldLabel: 'Auto recalc',\n\t\t\t\tid: this.getFieldID('autorecalc'),\n\t\t\t\tchecked: this.autorecalc,\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'Calc',\n\t\t\t\thandler: this.calc,\n\t\t\t\tscope: this\n\t\t\t},{\n\t\t\t\ttext: 'Save', \n\t\t\t\thandler: this.saveForm,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\n\t\tthis.setContentDiv('<br/>');\n\t\tcalculatorForm.render(this.getContentDiv());\n\t\tthis.setEphemeral('calculatorForm', calculatorForm);\n\n\t\tExt.get(this.getFieldID('formula')).on('focus', this.stop, this);\n\t\tExt.get(this.getFieldID('value')).on('focus', this.stop, this);\n\t}\n});\nnote.show();\n</script>","yPos":34,"height":168,"zIndex":122,"bgcolor":"#CCFFCC","notename":"Calculator","mtime":1196963717.191425},{"xPos":38,"from":"soupmaster in soupmaster/@foo3","width":370,"text":"<script type='text/javascript'>\n/**\n*\tmessage.js - Note Soup message widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\tsendit: function() {\n\t\tif (!notesoup.loggedin) {\n\t\t\tnotesoup.say('You must be logged in to do that.', 'error');\n\t\t\treturn;\n\t\t}\n\t\tvar tofolder = '';\n\t\tif (this.replyto) tofolder = this.replyto;\n\t\telse {\n\t\t\tvar to = prompt('Send to:', '');\n\t\t\tif (!to) return;\n\t\t\tvar parts = to.split('/');\n\t\t\tif (parts.length == 1) tofolder = to + '/inbox';\n\t\t\telse if (parts.length == 2) tofolder = to;\n\t\t\telse {\n\t\t\t\tnotesoup.say('Address error.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Build a message note to save in the destination\t\t\n\t\tvar thenote = this.cleanNote();\n\t\tdelete thenote.zIndex;\n\n\t\tvar msg = notesoup.username + ': ' + this.getField('messageForm', 'msg');\n\n\t\tif (!thenote.msglog) thenote.msglog = [];\n\t\tthenote.msglog.push(msg);\n\n\t\tif (this.sendCount) {\n\t\t\tthenote.notename = 'Reply from ' + notesoup.username;\n\t\t\tthenote.sendCount++;\n\t\t}\n\t\telse {\n\t\t\tthenote.notename = 'Message from ' + notesoup.username;\n\t\t\tthenote.sendCount = 1;\n\t\t}\n\t\tthenote.replyto = notesoup.foldername;\n\n\t\tnotesoup.postRequest({\n\t\t\tmethod:\"savenote\",\n\t\t\tparams:{\n\t\t\t\tnote: thenote,\n\t\t\t\ttofolder: tofolder,\n\t\t\t\tnotifyfolder:notesoup.foldername\n\t\t\t}},{\n\t\t\tsuccessProc: this.sendCount ? this.quietDelete.createDelegate(this) : this.resetForm.createDelegate(this),\n\t\t\trequestMessage: 'Sending message...',\n\t\t\tfailureMessage: 'Could not deliver the message.  Confirm you have sender rights to the destination.'\n\t\t});\n\t},\n\n\n\tresetForm: function() {\n\t\tthis.setValue('messageForm', 'msg', '');\n\t\tnotesoup.say('Message sent.');\n\t},\n\n\n\tquietDelete: function() {\n\t\tnotesoup.postRequest({\n\t\t\tmethod:\"sendnote\",\n\t\t\tparams:{\n\t\t\t\tnoteid: this.id,\n\t\t\t\tfromfolder: notesoup.foldername,\n\t\t\t\ttofolder: notesoup.username + '/trash',\n\t\t\t\tnotifyfolder: notesoup.foldername,\n\t\t\t\tdeleteoriginal: true\n\t\t\t}},{\n\t\t\trequestMessage: 'Message sent.',\n\t\t});\n\t},\n\n\n\tonrender: function() {\n\n\t\tvar messageForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 75,\n\t\t\tlabelalign: 'top',\n\t\t\twidth: this.width - 36,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: 'textfield',\n\t\t\t\tfieldLabel: ('sendCount' in this) && (this.sendCount > 1) ? 'Reply' : 'Message',\n\t\t\t\tname: 'msg',\n\t\t\t\tid: this.getFieldID('msg'),\n\t\t\t\twidth: this.width - 36 - 86\n\t\t\t}],\n\t\t\tbuttons: [{\n\t\t\t\ttext: 'Send',\n\t\t\t\thandler: this.sendit,\n\t\t\t\tscope: this\n\t\t\t},{\n\t\t\t\ttext: 'Done',\n\t\t\t\thandler: this.destroy,\n\t\t\t\tscope: this\n\t\t\t}]\n\t\t});\n\n\t\tvar o = [];\n\t\tif (this.msglog) {\n\t\t\to.push('<br/>');\n\t\t\to.push(this.msglog.reverse().join('<hr/>'));\n\t\t\to.push('<hr/>');\n\t\t}\n\t\tthis.setContentDiv(o.join(''));\n\t\tmessageForm.render(this.getContentDiv());\n\t\tthis.setEphemeral('messageForm', messageForm);\n\t}\n});\nnote.show();\n</script>\nloading...","yPos":558,"height":103,"zIndex":83,"bgcolor":"#CCFFCC","notename":"Message Widget","mtime":1196883834.821687}],"notename":"backup of soupmaster/ext2widgets","mtime":1196979714.405336,"id":"noteGjkwy4OV"}