{"widthOffset":40,"text":"<script type='text/javascript'>\n/**\n*\tporthole.js - Note Soup portable hole widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\tisPortableHole: true,\n\trandom: true,\n\n\tinit: function() {\n\t\tthis.bgcolor = '#eeeeee';\n\t\tthis.save();\n\t\tif (this.viewfolder) this.refreshNoteList();\n\t\telse if (this.feedurl) this.getFeed();\n\t},\n\n\n\trefreshNoteList: function() {\n\t\tif (this.viewfolder) {\n\t\t\tdelete this.running;\n\t\t\tdelete this.targetnoteid;\n\t\t\tdelete this.targetnote;\n\t\t\tdelete this.notes;\n\t\t\tdelete this.noteidlist;\n\n\t\t\tnotesoup.postRequest({\n\t\t\t\tmethod:\"gettemplatelist\",\n\t\t\t\tparams:{\n\t\t\t\t\tfromfolder: this.viewfolder\n\t\t\t}},{\n\t\t\t\trequestMessage: 'Fetching note list from ' + this.viewfolder + '...',\n\t\t\t\tsuccessMessage: 'Fetch complete.',\n\t\t\t\tsuccessProc:\tthis.handleNoteListUpdate,\n\t\t\t\tsuccessProcScope: this,\n\t\t\t\tfailureMessage: 'Failed.'\n\t\t\t});\n\t\t\tthis.showLoading();\n\t\t}\n\t},\n\n\n\t/**\n\t*\tnotelist:\n\t*\t[0]: foldername like charlie/inbox\n\t*\t[1]: noteid like noteN003kkrOI\n\t*\t[2]: notename like shopping list\n\t*/\n\thandleNoteListUpdate: function(response, options) {\n\t\tthis.setContentDiv('');\t// kill the loading indicator\n\t\tvar response = Ext.util.JSON.decode(response.responseText);\n\n\t\tif (response['error']) {\n\t\t\tnotesoup.say('Could not fetch note list.', 'error');\n\t\t\treturn;\n\t\t}\n\t\tvar notelist = response.command[0][1];\n\n\t\tthis.noteidlist = [];\n\t\tfor (var i=0; i < notelist.length; i++) {\n\t\t\tif (notelist[i][1].indexOf('.') < 0) {\n\t\t\t\tthis.noteidlist.push(notelist[i][1]);\n\t\t\t}\n\t\t}\n\t\t//notesoup.say('Note id list: ' + notesoup.dump(this.noteidlist));\n\t\tif (this.random) this.randomNote();\n\t\telse this.firstNote();\n\t\tthis.running = true;\n\t},\n\n\n\n\t/**\n\t*\tFetch an RSS feed via the server\n\t*/\n\tgetFeed: function(feedurl) {\n\t\tthis.feedurl = feedurl;\n\t\tExt.Ajax.request({\n\t\t\tmethod: 'GET',\n\t\t\turl: '/getfeed',\n\t\t\tparams: {url: feedurl},\n\t\t\tdisableCaching: false,\n\t\t\tsuccess: this.getFeedHandler,\n\t\t\tscope: this\n\t\t});\n\t\tnotesoup.say('Feed request sent...');\n\t\tthis.showLoading.createDelegate(this).defer(10);\n\t},\n\t\n\t\n\t/**\n\t*\tFormat and display the specified rss feed item.\n\t*\t@param {number} entry\tthe index of the entry in feed[entries]\n\t*/\n\tnoteFromRSSEntry: function(entry) {\n\t\tvar text = [];\n\t\ttext.push(\n\t\t\t'<b>', entry.title, ': </b>',\n\t\t\tentry.summary,\n\t\t\t'<a href=\"', entry.link, '\" target=\"_blank\">',\n\t\t\t'<img src=\"', notesoup.imageHost, 'images/famfamfam.com/link.png\"></a>',\n\t\t\tentry.updated ? '<hr/><h5>Updated: ' + entry.updated + '</h5>' : '');\n\n\t\treturn {\n\t\t\tnotename: this.feedname || 'RSS Hole',\n\t\t\ttext: text.join(''),\n\t\t\tid: 'feed' + notesoup.randomName(10),\n\t\t\tbgcolor: notesoup.ui.defaultNoteColor\n\t\t};\n\t},\n\t\n\t\n\t/**\n\t*\tHandler for getfeed: process incoming feed data.\n\t*\t@param {object} response\tthe response object\n\t*\t@param {boolean} success\ttrue if we got a feed back\n\t*/\n\tgetFeedHandler: function(response, success) {\n\t\tif (success) {\n\t\t\tthis.setContentDiv('Feed data received.');\n\t\t\tvar feed = Ext.util.JSON.decode(response.responseText);\n\t\t\tif (feed.bozo) {\n\t\t\t\tthis.setContentDiv('Server reports a format error in feed data.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.feedname = feed.feed.title || this.notename || '';\n\t\t\tthis.notes = {};\n\t\t\tthis.noteidlist = [];\n\t\t\tfor (var entry=0; entry < feed.entries.length; entry++) {\n\t\t\t\tvar thenote = this.noteFromRSSEntry(feed.entries[entry]);\n\t\t\t\tthis.notes[thenote.id] = thenote;\n\t\t\t\tthis.noteidlist.push(thenote.id);\n\t\t\t}\n\t\t\tthis.setContentDiv('');\n\t\t\t\n\t\t\tif (this.random) this.randomNote();\n\t\t\telse this.firstNote();\n\t\t\tthis.running = true;\n\t\t} \n\t\telse this.setContentDiv('Unable to fetch feed.');\n\t},\n\n\n\n\n\thandleNotePick: function(combo, record, index) {\n\t\tthis.cleanupGuests();\n\t\tif (index < 0) index = this.noteidlist.length - 1;\n\t\tif (index > this.noteidlist.length-1) index = 0;\n\t\tthis.targetnoteindex = index;\n\t\tthis.targetnoteid = this.noteidlist[this.targetnoteindex];\n\t\t\n\t\tif (this.notes && (this.targetnoteid in this.notes)) {\n\t\t\tthis.targetnote = this.notes[this.targetnoteid];\n\t\t\tthis.settimer();\n\t\t\tthis.show();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tnotesoup.postRequest({\n\t\t\tmethod:\"getnote\",\n\t\t\tparams:{\n\t\t\t\tfromfolder: this.viewfolder,\n\t\t\t\tnoteid: this.targetnoteid\n\t\t\t}\n\t\t},{\n\t\t\t//requestMessage: 'Fetching note...',\n\t\t\tsuccessProc: this.getNoteHandler,\n\t\t\tsuccessProcScope: this,\n\t\t\tfailureMessage: 'Could not fetch note: ' + this.targetnoteid\n\t\t});\n\t},\n\n\n\tgetNoteHandler: function(response, options) {\n\t\t//notesoup.say('Fetch complete.');\n\t\t//notesoup.say(response.responseText);\n\t\tvar response = Ext.util.JSON.decode(response.responseText);\n\n\t\tif (response['error']) {\n\t\t\tthis.targetnote = {\n\t\t\t\tnotename: 'Error',\n\t\t\t\ttext: '<br/><br/><center>Error fetching note: ' + response.error + '</center></br></br>',\n\t\t\t\tbgcolor: 'red'\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.targetnote = response.command[0][1];\n\t\t\tthis.settimer();\n\t\t}\n\t\t//notesoup.say('GETNOTEHANDLER: ' + notesoup.dump(this.targetnote));\n\t\tthis.show();\n\t},\n\n\n\t// player control panel\n\timageroot: \t\t'http://notesoup.net/images/UII_Icons/32x32/',\n\tprevimage: \t\t'backward.png',\n\tstartimage: \t'play.png',\n\tpauseimage: \t'pause.png',\n\tnextimage:\t\t'forward.png',\n\trefreshimage: \t'refresh.png',\n\topenfolderimage:'open.png',\n\tsettingsimage:\t'configuration.png',\n\tsnapshotimage: \t'digital_camera.png',\n\n\timagedisplaytime: 2,\n\timagecountdown: 2,\n\n\tsettimer: function() {\n\t\tthis.imagecountdown = this.imagedisplaytime;\n\t},\n\n\tontick: function() {\n\t\tif (this.running) {\n\t\t\t//notesoup.say('countdown: ' + this.imagecountdown + typeof(this.imagecountdown));\n\t\t\tif (--this.imagecountdown <= 0) {\n\t\t\t\tthis.settimer();\n\t\t\t\tif (this.random) this.randomNote.defer(Math.random() * 2000, this);\n\t\t\t\telse this.nextNote.defer(Math.floor(Math.random() * 2000), this);\n\t\t\t}\n\t\t}\n\t},\n\n\tfirstNote: function() {\n\t\tthis.handleNotePick(null, null, 0);\n\t},\n\n\tprevNote: function() {\n\t\tthis.handleNotePick(null, null, this.targetnoteindex-1);\n\t},\n\n\tnextNote: function() {\n\t\tthis.handleNotePick(null, null, this.targetnoteindex+1);\n\t},\n\t\n\trandomNote: function() {\n\t\tthis.handleNotePick(null, null, Math.floor(Math.random() * this.noteidlist.length));\n\t},\n\t\n\tpause: function() {\n\t\tnotesoup.say('Stopped.');\n\t\tdelete this.running;\n\t\tthis.updateControls();\n\t},\n\n\tstart: function() {\n\t\tnotesoup.say('Starting...');\n\t\tthis.running = true;\n\t\tthis.updateControls();\n\t},\n\t\n\topenfolder: function() {\n\t\tif (this.viewfolder)\n\t\t\tnotesoup.openFolder(this.viewfolder);\n\t},\n\t\n\tsettings: function() {\n\t\tvar f = notesoup.prompt('Enter the folder to view, or an RSS feed URL:', this.viewfolder || this.feedurl || notesoup.foldername);\n\t\tif (!f) return;\n\n\t\tif (f.substring(0,7) == 'feed://') {\n\t\t\tthis.feedurl = 'http' + f.substr(4);\n\t\t\tdelete this.viewfolder;\n\t\t\tthis.save();\n\t\t\tthis.getFeed(this.feedurl);\n\t\t}\n\t\telse {\n\t\t\tthis.viewfolder = f;\n\t\t\tdelete this.feedurl;\n\t\t\tthis.save();\n\t\t\tthis.refreshNoteList();\n\t\t}\n\t},\n\n\tclone: function(obj) {\n\t\tvar theclone = {};\n\t\tfor (var o in obj) theclone[o] = obj[o];\n\t\treturn theclone;\n\t},\n\n\tsnapshot: function() {\n\t\tvar newnote = this.clone(this.targetnote);\n\t\tdelete newnote.id;\n\t\tdelete newnote.homediv;\n\t\tdelete newnote.xPos;\n\t\tdelete newnote.yPos;\n\t\tdelete newnote.zIndex;\n\t\tnotesoup.saveNote(newnote, notesoup.foldername);\n\t},\n\n\tmakeButton: function(img, handler) {\n\t\treturn ['<img src=\"', this.imageroot, img, '\"',\n\t\t\t' onclick=\"notesoup.ui.getEnclosingNote(this).', handler, '();\"/>'].join('');\n\t},\n\n\trenderControls: function() {\n\t\tvar o = [];\n\t\to.push('<center>');\n\t\to.push(this.makeButton(this.settingsimage, 'settings'));\n\t\tif (this.noteidlist) {\n\t\t\to.push(this.makeButton(this.previmage, 'prevNote'));\n\n\t\t\tif (this.running) o.push(this.makeButton(this.pauseimage, 'pause'));\n\t\t\telse o.push(this.makeButton(this.startimage, 'start'));\n\n\t\t\to.push(this.makeButton(this.nextimage, 'nextNote'));\n\t\t\to.push(this.makeButton(this.snapshotimage, 'snapshot'));\n\t\t}\n\t\tif (this.viewfolder)\n\t\t\to.push(this.makeButton(this.openfolderimage, 'openfolder'));\n\t\to.push('</center>');\n\t\treturn o.join('');\n\t},\n\n\tupdateControls: function() {\n\t\tvar elt = Ext.get(this.id + '_title');\n\t\tif (elt) elt.update(this.renderControls());\n\t},\n\t\n\tguestNoteName: function() {\n\t\tfor (var i=0; i < 10000; i++) {\n\t\t\tvar name = 'guest' + notesoup.randomName(10);\n\t\t\tif (!$(name)) return name;\n\t\t}\n\t\tnotesoup.say('oops guestname');\n\t},\n\t\n\tcleanupGuests: function() {\n\t\tif (this.guestnotes) {\n\t\t\twhile (this.guestnotes.length > 0) {\n\t\t\t\tvar noteid = this.guestnotes.pop();\n\t\t\t\tif (noteid in notesoup.notes) {\n\t\t\t\t\tif (notesoup.notes[noteid].isPortableHole)\n\t\t\t\t\t\tnotesoup.notes[noteid].cleanupGuests();\n\t\t\t\t\tnotesoup.destroyNote(noteid);\n\t\t\t\t}\n\t\t\t\telse notesoup.say('Guest already left: ' + noteid);\n\t\t\t}\n\t\t}\n\t},\n\n\tonrender: function() {\n\t\tvar o = [];\n\t\tvar portHoleCover = {\n\t\t\tnotename: this.renderControls(),\t\t//'Portable Hole',\n\t\t\ttext: '<br/><br/><br/><br/><br/>',\n\t\t\tbgcolor: '#000000'\n\t\t};\n\t\tif (this.targetnote) {\n\t\t\tthis.cleanupGuests();\n\t\t\n\t\t\t//var guestnote = this.clone(this.targetnote.isPortableHole ? portHoleCover : this.targetnote);\n\t\t\tvar guestnote = {};\n\t\t\tif (this.targetnote.isPortableHole && (this.viewfolder == notesoup.foldername) &&\n\t\t\t\t(this.targetnote.id == this.id)) guestnote = this.clone(portHoleCover);\n\t\t\telse guestnote = this.clone(this.targetnote);\t\n\t\n\t\t\tguestnote.id = 'guest' + notesoup.randomName(10);\n\t\t\tguestnote.homediv = this.id + notesoup.ui.contentSuffix;\n\t\t\tguestnote.xPos = this.xPos + 20;\n\t\t\tguestnote.yPos = this.yPos + 50;\n\t\t\tguestnote.zIndex = this.zIndex + 1;\n\t\t\tnotesoup.updateNote(guestnote);\n\t\t\tif (!this.guestnotes) this.guestnotes = [];\n\t\t\tthis.guestnotes.push(guestnote.id);\n\t\t\tthis.guestnoteid = guestnote.id;\n\t\t}\n\t\tthis.updateControls();\n\t},\n\t\n\n\twidthOffset: 40,\n\theightOffset: 100,\n\tminWidth: 100,\n\tminHeight: 100,\n\n\tsyncHeight: function() {\n\n\t\tif (!this.targetnote) return soupnote.prototype.syncHeight.apply(this);\n\t\tvar guestdiv = Ext.get(this.guestnoteid + notesoup.ui.divSuffix);\n\t\tif (!guestdiv) {\n\t\t\t//notesoup.say('Could not fetch guest div.', 'error');\n\t\t\treturn;\n\t\t}\n\t\tvar guestsize = guestdiv.getSize();\n\t\tguestsize.width = Math.max(guestsize.width || 0, this.minWidth);\n\t\tguestsize.height = Math.max(guestsize.height || 0, this.minHeight);\n\t\t//notesoup.say('Adjusting to guest size: ' + guestsize.width + ' ' + guestsize.height);\n\n\t\tvar outerDiv = Ext.get(this.id + notesoup.ui.divSuffix);\n\t\tvar noteDiv = Ext.get(this.id);\n\t\tvar contentDiv = Ext.get(this.id + notesoup.ui.contentSuffix);\n\t\tif (!outerDiv || !contentDiv) {\n\t\t\tnotesoup.say('No outer DIV or no content DIV.', 'error');\n\t\t}\n\t\tcontentDiv.setSize(guestsize.width || notesoup.defaultNoteWidth, guestsize.height || notesoup.defaultNoteHeight, true);\n\t\tnoteDiv.setSize(guestsize.width + this.widthOffset, guestsize.height + this.heightOffset, true);\n\t\touterDiv.setSize(guestsize.width + this.widthOffset, guestsize.height + this.heightOffset, true);\n\t}\n});\nnote.init();\n</script>","random":true,"height":40,"imageroot":"http://notesoup.net/images/UII_Icons/32x32/","mtime":1196984207.549083,"nextimage":"forward.png","isPortableHole":true,"previmage":"backward.png","from":"widgets in widgets/rsszoo","width":250,"id":"noteD5MI0bK8","minWidth":100,"bgcolor":"#eeeeee","heightOffset":100,"imagecountdown":2,"refreshimage":"refresh.png","minHeight":100,"zIndex":97,"pauseimage":"pause.png","xPos":477,"startimage":"play.png","settingsimage":"configuration.png","yPos":28,"imagedisplaytime":2,"notename":"Portable Hole","snapshotimage":"digital_camera.png","openfolderimage":"open.png"}