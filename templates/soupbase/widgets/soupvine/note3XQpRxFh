{"xPos":15,"from":"widgets in widgets/soupvine","subs":{},"bgcolor":"#FFFF99","text":"<script type='text/javascript'>\n/**\n*\tsoupvine.js - Note Soup twitter widget\n*\tCopyright 2007 by Bill Roy\n*\tAll rights reserved.\n*/\nvar note = notesoup.ui.getEnclosingNote(this);\nnote.set({\n\n\tpostinterval: '20 seconds',\t// minimum time between posts\n\n\tinit: function() {\n\t\t//if (!this.subs) this.subs = [];\n\t\tif (!this.subs) this.subs = {};\n\t\tthis.show();\n\t},\n\n\tmakeSubscriptionTicket: function(cmd) {\n\t\tif (!notesoup.loggedin || !notesoup.username || !notesoup.issender) {\n\t\t\treturn notesoup.say('Sorry.');\n\t\t}\n\t\tnotesoup.saveNote({\n\t\t\tnotename: cmd + ' ' + notesoup.username,\n\t\t\tcmd: cmd,\n\t\t\tapropos: this.id,\n\t\t\tbgcolor: cmd == 'subscribe' ? 'lime' : 'deeppink',\n\t\t\ttext: notesoup.username\n\t\t}, notesoup.foldername);\n\t\talert('Your request to ' + cmd + ' has been saved and will be processed before the next update.');\n\t},\n\tsubscribe: function() { this.makeSubscriptionTicket('subscribe'); },\n\tunsubscribe: function() { this.makeSubscriptionTicket('unsubscribe'); },\n\n\taddsubscription: function(user, mtime) {\n\t\tif (!user) return;\n\t\tnotesoup.say('Subscribe ' + user);\n\n\t\t// only the eldest ticket counts\n\t\tif ((user in this.subs) && (mtime < this.subs[user])) return;\n\n\t\t//notesoup.say('before: ' +  notesoup.dump(this.subs) + '' + notesoup.dump(this));\n\t\t//this.subs.push(user);\n\t\tthis.subs[user] = notesoup.getServerTime(); \t// unix mtime!\n\t\t//notesoup.say('after: ' + notesoup.dump(this.subs) + ' ' + notesoup.dump(this));\n\t\tthis.dirty = true;\n\t},\n\n\tdeletesubscription: function(user, mtime) {\n\t\tnotesoup.say('Unsubscribe ' + user);\n\t\tif (this.subs && (user in this.subs) && (this.subs[user] < mtime)) {\n\t\t\tdelete this.subs[user];\n\t\t\tthis.dirty = true;\n\t\t}\n\t},\n\n\tprocessTickets: function() {\n\t\tif (!notesoup.iseditor) return;\n\t\tnotesoup.say('Processing subscription updates...');\n\t\tvar deletelist = [];\n\t\tfor (var n in notesoup.notes) {\n\t\t\tif (n == this.id) continue;\n\t\t\tvar note = notesoup.notes[n];\n\t\t\tif (typeof(note.cmd) == 'string') {\n\t\t\t\tnotesoup.say('command: ' + note.cmd + ' ' + note.id);\n\t\t\t\tif (note.cmd == 'subscribe') this.addsubscription(note.text, note.mtime);\n\t\t\t\telse if (note.cmd == 'unsubscribe') this.deletesubscription(note.text, note.mtime);\n\t\t\t\telse {\n\t\t\t\t\tnotesoup.say('Ticket with bogus command: ' + note.id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdeletelist.push(n);\n\t\t\t}\n\t\t}\n\t\tif (this.dirty) {\n\t\t\tnotesoup.say('Saving subscription updates...');\n\t\t\tdelete this.dirty;\n\t\t\tthis.save();\n\t\t\tthis.sendself('show');\t// update remote watchers\n\t\t\tnotesoup.say('Saved.');\n\t\t}\n\t\twhile (deletelist.length) {\n\t\t\tvar d = deletelist.pop();\n\t\t\tnotesoup.say('Removing processed subscription request ' + d);\n\t\t\tnotesoup.deleteNote(d);\n\t\t}\n\t},\n\t\n\taddsub: function() {\n\t\tvar user = prompt('User to subscribe:', '');\n\t\tif (user) {\n\t\t\tthis.addsubscription(user, notesoup.getServerTime());\n\t\t\t//notesoup.say('subdump: ' + notesoup.dump(this.subs));\n\t\t\tthis.save();\n\t\t}\n\t},\n\n\tdelsub: function() {\n\t\tvar user = prompt('User to unsubscribe:', '');\n\t\tif (user) {\n\t\t\tthis.deletesubscription(user, notesoup.getServerTime());\n\t\t\tthis.save();\n\t\t}\n\t},\n\t\n\tcountsubs: function() {\n\t\tvar count=0;\n\t\tfor (var s in this.subs) ++count;\n\t\treturn count;\n\t},\n\n\twho: function() {\n\t\tthis.processTickets();\n\t\tvar thenote = {\n\t\t\tnotename: 'Subscriptions for ' + notesoup.foldername + ':',\n\t\t\txPos: this.xPos,\n\t\t\tyPos: this.yPos + this.height + 12,\n\t\t\tbgcolor: this.bgcolor || notesoup.ui.defaultNoteColor\n\t\t};\n\t\tvar o = [];\n\t\tfor (var s in this.subs) o.push(s, '<br/>');\n\t\to.push('<center><input type=\"submit\" value=\"done\" onclick=\"notesoup.ui.getEnclosingNote(this).destroy();\"/></center>');\n\t\tthenote.text = o.join('');\n\t\tnotesoup.saveNote(thenote);\n\t},\n\n\n\tpost: function() {\n\n\t\tif (this.lastpost) {\t// rate limiting\n\t\t\tvar dt = new Date().getTime() - (this.lastpost + notesoup.getDuration(this.postinterval));\n\t\t\tif (dt < 0) {\n\t\t\t\tnotesoup.say('You may post again in ' + notesoup.stringifyTimeDiff(-dt), 'error');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.processTickets();\n\n\t\tvar post = this.getField('postingForm', 'msg');\n\t\tnotesoup.say('Posting message: ' + post);\n\t\tif (!post) return;\n\t\t\n\t\tvar log = $n(this.logname || 'post log');\n\t\tif (log) {\n\t\t\tlog.text = ['' + new Date(), '<br/>', notesoup.username, ': ', post, '<hr/>', (log.text || '')].join('');\n\t\t\tlog.save();\n\t\t\tlog.flash('green');\n\t\t}\n\t\t\n\t\tvar deliveries = 0;\n\t\tvar t1 = new Date().getTime();\n\t\tfor (var s in this.subs) {\n\t\t\tvar channeluri = (s.charAt(0) == '/') ? s : '/talk/' + s;\n\t\t\tnotesoup.say('Posting to ' + channeluri + '...');\n\t\t\tnotesoup.postEvent(channeluri, 'say', post);\n\t\t\tdeliveries++;\n\t\t}\n\n\t\tthis.lastpost = new Date().getTime();\n\t\tthis.save();\n\t\tnotesoup.say('Posted.');\n\t\tnotesoup.say('Posted ' + deliveries + ' notifications in ' + Math.floor(new Date().getTime()-t1) + 'ms', 'whisper');\n\t},\n\n\tmakeButton: function(name) {\n\t\treturn ['<input type=\"submit\" value=\"', name, '\" onclick=\"notesoup.ui.getEnclosingNote(this).', name, '();\"/>'].join('');\n\t},\n\n\tonrender: function() {\n\t\tvar o = [];\n\t\tif (notesoup.iseditor) this.renderPostingForm();\n\t\telse if (notesoup.issender) {\n\t\t\tvar subscribed = (notesoup.username in this.subs);\n\t\t\tvar buttontext =  subscribed ? 'unsubscribe' : 'subscribe';\n\t\t\tthis.setContentDiv([\n\t\t\t\t'<center>',\n\t\t\t\t\t'<br/>',\n\t\t\t\t\t'Welcome, ', notesoup.username || 'Anonymous', '<br/>',\n\t\t\t\t\t'You are', subscribed ? '' : ' not', ' subscribed.<br/>',\n\t\t\t\t\t'Click here to ', buttontext, ':<br/>', \n\t\t\t\t\tthis.makeButton(buttontext), '<br/>',\n\t\t\t\t'</center>'\n\t\t\t].join(''));\n\t\t}\n\t\telse {\n\t\t\tthis.setContentDiv('<center><br/>Please <a href=\"/folder/system/welcome\">create an account and log in</a> to subscribe.<br/><br/></center>');\n\t\t}\n\t},\n\t\n\trenderPostingForm: function() {\n\t\tvar postingForm = new Ext.FormPanel({\n\t\t\tlabelWidth: 75,\n\t\t\tminButtonWidth: 25,\n\t\t\tlabelalign: 'top',\n\t\t\twidth: this.width - 36,\n\t\t\tbodyStyle: 'background:' + (this.bgcolor || notesoup.ui.defaultNoteColor),\n\t\t\tborder: false,\n\t\t\tbodyBorder: false,\n\t\t\titems: [{\n\t\t\t\txtype: 'textarea',\n\t\t\t\tfieldLabel: 'Message',\n\t\t\t\tname: 'msg',\n\t\t\t\tid: this.getFieldID('msg'),\n\t\t\t\twidth: this.width - 36 - 86\n\t\t\t}],\n\t\t\tbuttons: [\n\t\t\t\t{text: 'post', handler: this.post, scope: this},\n\t\t\t\t{text: '+', handler: this.addsub, scope: this, width: 25 },\n\t\t\t\t{text: '-', handler: this.delsub, scope: this, width: 25 },\n\t\t\t\t{text: 'who', handler: this.who, scope: this}\n\t\t\t],\n\t\t\tkeys: [{key: 13, fn: this.post, scope: this}]\n\t\t});\n\t\tthis.setContentDiv([\n\t\t\t'<center><br/>', \n\t\t\t'' + this.countsubs(), ' subscribers<br/>',\n\t\t\t'<br/>',\n\t\t\t'</center><hr/>'\n\t\t].join(''));\n\t\tpostingForm.render(this.getContentDiv());\n\t\tthis.setEphemeral('postingForm', postingForm);\n\t}\n});\nnote.init();\n</script>","yPos":42,"height":204,"zIndex":37,"width":"250","notename":"soupvine","mtime":1202766321.652000,"postinterval":"20 seconds","id":"note3XQpRxFh"}